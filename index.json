[{"content":"","date":"2025.8.25","externalUrl":null,"permalink":"/categories/github/","section":"分类","summary":"","title":"GitHub","type":"categories"},{"content":"因为我希望博客博文的源文件不会轻易被别人一锅端掉，所以采取了博客源码使用私密仓库，将 Hugo 创建的静态文件部署到 Pages 的仓库之中。由于本人过于懒惰的原因，就使用了 Actions 在源文件的仓库接受到提交时，就会自动生产静态文件并部署到 Pages 仓库。\n创建部署密钥 (Deploy Key) # 在本机上操作 # 为了让源码仓库有权限推送到 GitHub Pages 仓库，需要创建一个 SSH 密钥对，并将公钥配置为目标仓库的“部署密钥”，私钥配置为源码仓库的“Secret”。\n使用如下命令创建 SSH 密钥对，注意不要设置密码 (passphrase)，一路回车即可。\nssh-keygen -t rsa -b 4096 -C \u0026#34;gh-actions-for-hugo\u0026#34; -f hugo-deploy-key 这个命令会生成两个文件：\nhugo-deploy-key (私钥) hugo-deploy-key.pub (公钥) Pages 仓库配置 # 接下来就是在 Pages 仓库添加公钥。打开你目标仓库 https://github.com/xxx/xxx.github.io，进入 Settings → Security → Deploy keys，点击 Add deploy key，输入参数如下，填写完毕后点击 Add key。\nTitle：可以随意填写，如 Hugo Deploy Action。 Key：将 hugo-deploy-key.pub （公钥）文件里的全部内容复制并粘贴进去。 勾选 Allow write access。这一点至关重要，因为它需要写入权限来推送构建好的文件。 源码仓库配置 # 最后，在源码仓库中添加私钥。打开 源码仓库，进入 Settings → Security → Secrets and variables → Actions，点击 New repository secret，输入参数如下，填写完毕后点击 Add key。\nName：必须命名为 ACTIONS_DEPLOY_KEY (这个名字将在下面的工作流文件中使用)。 Secret：将 hugo-deploy-key (私钥) 文件里的全部内容复制并粘贴进去。 创建 GitHub Actions 工作流文件 # 在 Hugo 源码仓库 的根目录下，创建一个 .github/workflows 文件夹，在该文件夹中创建一个 .yml 文件，例如 deploy.yml；将下面的代码完整地复制并粘贴到 deploy.yml 文件中。\n# deploy.yml # 工作流名称 name: Build and Deploy Hugo Site # 触发条件：当推送到 main 分支时触发 on: push: branches: - main # 或者你的默认分支名，例如 master # Job 任务 jobs: build-and-deploy: # 运行环境 runs-on: ubuntu-latest # 步骤 steps: # 步骤一：检出源码 # 使用 actions/checkout@v4 # submodules: true 是为了同时拉取你的 Hugo 主题（如果主题是作为 git submodule 添加的） - name: Checkout uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod # 步骤二：设置 Hugo 环境 # 使用 peaceiris/actions-hugo@v2 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # 你也可以指定一个版本，例如 \u0026#39;0.119.0\u0026#39; extended: true # 因为主题需要 Hugo Extended 版本 # 步骤三：构建静态文件 # 执行 hugo 命令，--minify 会压缩生成的 HTML/CSS/JS 文件 - name: Build run: hugo --minify # 步骤四：部署到 duan-1.github.io # 使用 peaceiris/actions-gh-pages@v3 - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: # 使用步骤一中设置的部署私钥 deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # 部署的目标仓库 external_repository: xxx/xxx.github.io # 部署的目标分支 publish_branch: main # Github Pages 用户/组织站点的分支通常是 main 或 master # 需要部署的文件夹，hugo 默认生成到 public publish_dir: ./public # 如果你有自定义域名，可以取消下面这行的注释 # cname: your-domain.com # 提交部署信息 commit_message: ${{ github.event.head_commit.message }} 提交代码并验证 # 提交代码 # 将创建的 .github/workflows/deploy.yml 文件 add, commit, 和 push 到 Hugo 源码仓库。\ngit add .github/workflows/deploy.yml git commit -m \u0026#34;feat: Add GitHub Actions workflow for auto-deployment\u0026#34; git push origin main 验证 # 推送完成后，进入源码仓库的 Actions 标签页，就会看到一个名为 Build and Deploy Hugo Site 的工作流正在运行；等待工作流运行成功（显示绿色对勾），如果失败（红色叉），我们可以点击进去查看日志，定位错误原因。在工作流成功后，访问 GitHub Pages 的仓库，就会发现多了一个由 GitHub Actions 产生的提交；稍等片刻，访问博客网址 https://xxx.github.io，就能看到最新的内容。\n到这里，就成功设置了自动化部署。之后每次当完成一篇新博客并将其推送到源码仓库的 main 分支时，GitHub Actions 就会自动完成构建和部署的所有工作。\n","date":"2025.8.25","externalUrl":null,"permalink":"/posts/github-actions-pages/","section":"文章","summary":"","title":"GitHub 上使用 Actions 部署 Pages","type":"posts"},{"content":"","date":"2025.8.25","externalUrl":null,"permalink":"/categories/","section":"分类","summary":"","title":"分类","type":"categories"},{"content":"","date":"2025.8.25","externalUrl":null,"permalink":"/","section":"欢迎来到我的秘密基地！🎉","summary":"","title":"欢迎来到我的秘密基地！🎉","type":"page"},{"content":"","date":"2025.8.25","externalUrl":null,"permalink":"/posts/","section":"文章","summary":"","title":"文章","type":"posts"},{"content":"","date":"2025.8.25","externalUrl":null,"permalink":"/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/","section":"分类","summary":"","title":"瞎折腾","type":"categories"},{"content":"","date":"2025.8.14","externalUrl":null,"permalink":"/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/","section":"分类","summary":"","title":"服务器","type":"categories"},{"content":"acme.sh 是一个强大且不依赖任何特定语言的 ACME 客户端，非常适合在服务器上直接使用，接下的操作均在 Debian 12 服务器上操作。\n前提条件 # 在开始之前，需要准备如下几点：\n域名：例如 your_domain.com。\nDNS 配置：域名解析已经正确指向了你的云服务器。\nNginx 已安装：服务器已经安装好了 Nginx 且正常运行。\n防火墙已放行：服务器防火墙允许 80 (HTTP) 和 443 (HTTPS) 端口的入站流量。\n安装 acme.sh # 通过 SSH 登录服务器,执行acme.sh 的官方安装脚本。\n# 安装 curl sudo apt update sudo apt install curl # 执行安装脚本，替换成你自己的邮箱 curl https://get.acme.sh | sh -s email=your_email@example.com 安装完成后，重新加载 .bashrc 或是重新 SSH 登陆服务器来启用 acme.sh 命令：\nsource ~/.bashrc 生成通配符 SSL 证书 # 确认 DNS 提供商并获取 API 密钥 # 这一步需要登录购买和管理域名解析的平台（例如 Cloudflare, GoDaddy, Namecheap, 阿里云, 腾讯云 DNSPod 等）。acme.sh 支持几乎所有主流的 DNS 提供商。可以在这里查看完整的支持列表和每家提供商所需的 API 密钥名称： acme.sh DNS API WIKI\n以阿里云为例：\n登录阿里云创建 RAM 用户，访问控制 RAM 控制台。 进入 RAM 用户界面寻找到创建 AccessKey 按钮。 点击创建后，获取 AccessKey ID 和 AccessKey Secret。 在服务器上配置 API 密钥 # 在服务器上执行 export 命令。后续申请签发证书时，acme.sh 会将 API 密钥储存到当前用户目录下的文件中： ~/.acme.sh/account.conf。\n以阿里云为例：\nexport Ali_Key=\u0026#34;刚刚获取的AccessKey ID\u0026#34; export Ali_Secret=\u0026#34;刚刚获取的AccessKey Secret\u0026#34; 签发通配符证书 # 确保你的命令中包含了根域名和通配符域名。\n使用 --dns 参数并指定DNS 提供商（例如 阿里云 是 dns_ali）。\nacme.sh --issue --dns dns_ali -d your_domain.com -d *.your_domain.com acme.sh 会自动调用 DNS API，创建验证所需的 TXT 记录，等待几秒让 DNS 记录生效，然后完成验证并获取证书。成功后，它会自动删除该 TXT 记录。\n安装（部署）证书到 Nginx # acme.sh 生成的证书默认存放在其内部目录 ~/.acme.sh/ 中，我们需要使用 install-cert 命令将证书“安装”到一个稳定、可公开访问的目录，比如 /etc/nginx/ssl/。这样做还有一个巨大的好处：acme.sh 会记住安装路径和命令。未来当证书自动续期成功后，它会自动把新证书安装到相同的位置，并自动执行你指定的命令来重载 Nginx，实现完全自动化。\n创建用于存放证书的目录：\nsudo mkdir -p /etc/nginx/ssl 执行命令，安装证书到指定目录：\nacme.sh --install-cert -d your_domain.com \\ --key-file /etc/nginx/ssl/your_domain.com/key.pem \\ --fullchain-file /etc/nginx/ssl/your_domain.com/cer.pem \\ --reloadcmd \u0026#34;service nginx reload\u0026#34; --install-cert -d your_domain.com: 指定要安装哪个域名的证书。\n--key-file 和 --fullchain-file: 指定证书私钥和公钥链的目标路径。\n--reloadcmd \u0026quot;service nginx reload\u0026quot;: 这是实现自动化的核心。acme.sh 会记住这个命令，并在未来每次成功续期后自动执行它，让 Nginx 加载新证书。\n配置 Nginx 使用 SSL 证书 # 编辑网站配置文件：\nsudo nano /etc/nginx/sites-available/my-hugo-blog.conf 用以下内容完整替换原来的配置。这是一个经过优化的、包含 HTTP 自动跳转到 HTTPS 的配置模板。\n# 强制将所有 HTTP 请求重定向到 HTTPS server { listen 80; listen [::]:80; server_name your_domain.com www.your_domain.com; return 301 https://$host$request_uri; } # HTTPS 服务配置 server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name your_domain.com www.your_domain.com; # 证书文件路径 (必须与 acme.sh install-cert 命令中的路径一致) ssl_certificate /etc/nginx/ssl/your_domain.com.cer; ssl_certificate_key /etc/nginx/ssl/your_domain.com.key; # 提升安全性的 SSL/TLS 配置 ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers off; ssl_ciphers \u0026#34;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\u0026#34;; ssl_ecdh_curve secp384r1; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; resolver 8.8.8.8 8.8.4.4 valid=300s; resolver_timeout 5s; # HSTS Header (强制浏览器使用 HTTPS) add_header Strict-Transport-Security \u0026#34;max-age=63072000; includeSubDomains; preload\u0026#34;; add_header X-Frame-Options DENY; add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection \u0026#34;1; mode=block\u0026#34;; # 网站根目录和默认文件 root /var/www/my-hugo-blog; index index.html; location / { try_files $uri $uri/ =404; } } 完成并验证 # 保存 Nginx 配置文件后，测试配置语法并重启 Nginx：\nsudo nginx -t sudo systemctl restart nginx 现在，打开浏览器访问 https://your_domain.com，能看到地址栏出现了安全锁标志。这下网站现在不仅启用了 HTTPS，而且其证书将在未来每 60 天自动续期一次，无需再进行任何手动操作。\n","date":"2025.8.14","externalUrl":null,"permalink":"/posts/acme-auto-ssl/","section":"文章","summary":"","title":"使用 acme.sh 自动化获取网站 SSL 证书","type":"posts"},{"content":"你好世界！\n","date":"2025.8.12","externalUrl":null,"permalink":"/posts/hello-world/","section":"文章","summary":"","title":"Hello World","type":"posts"},{"content":"","date":"2025.8.12","externalUrl":null,"permalink":"/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/","section":"分类","summary":"","title":"碎碎念","type":"categories"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]